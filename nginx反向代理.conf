# HTTP 服务器配置
server {
    listen 8080; # 监听端口 81 上的 HTTP 流量
    server_name www.yourdomain.com; # 服务器名称
    root /usr/share/nginx/html; # 网站根目录
    index index.html index.htm; # 默认首页文件

    # 访问日志和错误日志
    access_log /var/log/nginx/www.yourdomain.com.access.log;
    error_log /var/log/nginx/www.yourdomain.com.error.log;

    # 性能和缓存设置
    sendfile on; # 启用 sendfile 优化
    tcp_nopush on; # 启用 TCP nopush
    tcp_nodelay on; # 禁用 TCP Nagle 算法以改善延迟
    keepalive_timeout 65; # 保持连接的超时时间
    types_hash_max_size 2048; # 增加 MIME 类型的哈希表大小
    # Gzip 压缩以减少发送给客户端的文件大小
    gzip on;
    gzip_disable "msie6"; # 禁用针对非常老旧的浏览器的 gzip
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # 压缩级别（1-9）
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # 安全相关的响应头
    add_header X-Content-Type-Options nosniff; # 防止 MIME 类型嗅探
    add_header X-Frame-Options SAMEORIGIN; # 防止点击劫持
    add_header X-XSS-Protection "1; mode=block"; # 对旧版浏览器启用 XSS 保护
    # 静态文件缓存设置
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d; # 设置静态文件的缓存时间
        add_header Cache-Control "public, no-transform"; # 设置缓存控制头
        access_log off; # 关闭静态文件的访问日志记录
    }
    # 隐藏 Nginx 版本号
    server_tokens off;
    # 禁用不安全的 HTTP 方法
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 405;
    }
# 禁止访问隐藏文件（以点开头的文件）
    location ~ /\. {
        deny all;
        access_log off; # 关闭访问日志
        log_not_found off; # 关闭日志中的“未找到”错误
    }
    # 错误页面处理
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    # 出于安全原因，禁止访问特定文件类型
    location ~* \.(htaccess|htpasswd|ini|phps|fla|psd|log|sh)$ {
        deny all;
    }
    # 启用目录列表显示
    location / {
        autoindex on; # 开启目录索引
        autoindex_exact_size off; # 显示文件的确切大小
        autoindex_localtime on; # 显示本地时间而不是 GMT 时间
    }

    
}

# HTTPS 服务器配置
server {
    listen       443 ssl http2;
    listen       [::]:443 ssl http2;
    listen       2053 ssl http2;
    listen       [::]:2053 ssl http2;
    listen       2096 ssl http2;
    listen       [::]:2096 ssl http2;
    server_name www.yourdomain.com cdn.aiary.xyz; # 服务器名称
    charset utf-8; # 设置字符集


   # SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3; # 仅允许使用 TLSv1.2 和 TLSv1.3
    ssl_ciphers 'TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'; # 仅使用提供完全前向保密的强加密套件
    ssl_ecdh_curve X25519:secp384r1; # 使用更强的 ECDH 曲线，优先使用 X25519

  
    ssl_prefer_server_ciphers on; # 优先使用服务器指定的加密套件
    ssl_session_cache shared:SSL:10m; # SSL 会话缓存
    ssl_session_timeout 10m; # SSL 会话超时时间
    ssl_session_tickets off; # 禁用 SSL 会话票据
    ssl_certificate /usr/local/etc/xray/fullchain.pem; # SSL 证书文件路径
    ssl_certificate_key /usr/local/etc/xray/privkey.pem; # SSL 证书密钥文件路径
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; # 启用 HSTS


    # 启用 OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /usr/local/etc/xray/fullchain.pem; # 包含根证书的完整证书链文件路径
    resolver 8.8.8.8 8.8.4.4 valid=300s; # 使用可靠的 DNS 解析器
    resolver_timeout 5s;

  

    # 性能和缓存设置
    sendfile on; # 启用 sendfile 优化
    tcp_nopush on; # 启用 TCP nopush
    tcp_nodelay on; # 禁用 TCP Nagle 算法以改善延迟
    keepalive_timeout 65; # 保持连接的超时时间
    types_hash_max_size 2048; # 增加 MIME 类型的哈希表大小
    # Gzip 压缩以减少发送给客户端的文件大小
    gzip on;
    gzip_disable "msie6"; # 禁用针对非常老旧的浏览器的 gzip
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # 压缩级别（1-9）
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # 安全相关的响应头
    add_header X-Content-Type-Options nosniff; # 防止 MIME 类型嗅探
    add_header X-Frame-Options SAMEORIGIN; # 防止点击劫持
    add_header X-XSS-Protection "1; mode=block"; # 对旧版浏览器启用 XSS 保护
    # 静态文件缓存设置
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d; # 设置静态文件的缓存时间
        add_header Cache-Control "public, no-transform"; # 设置缓存控制头
        access_log off; # 关闭静态文件的访问日志记录
    }
    # 隐藏 Nginx 版本号
    server_tokens off;
    # 禁用不安全的 HTTP 方法
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 405;
    }
# 禁止访问隐藏文件（以点开头的文件）
    location ~ /\. {
        deny all;
        access_log off; # 关闭访问日志
        log_not_found off; # 关闭日志中的“未找到”错误
    }

    # 错误页面处理
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    # 出于安全原因，禁止访问特定文件类型
    location ~* \.(htaccess|htpasswd|ini|phps|fla|psd|log|sh)$ {
        deny all;
    }

    # 如果请求的 host 不是 aiary.xyz 的子域，则关闭连接
    if ($host !~* \.aiary\.xyz$) {
        return 444;
    }

    root /usr/share/nginx/html; # 网站根目录

    # 配置根目录的 location 块，启用自动索引功能
    location / {
        autoindex on; # 开启自动索引功能
        autoindex_exact_size on; # 显示文件的确切大小
        proxy_set_header X-Real-IP $remote_addr; # 设置真实 IP 头
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 设置 X-Forwarded-For 头
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip; # 设置 Cloudflare 连接 IP 头
    }

    # 配置 location /download2 块，将请求代理到本地服务
    location /download2 {
        proxy_redirect off; # 禁用代理跳转
        proxy_pass http://127.0.0.1:1234; # 代理到本地端口
        proxy_http_version 1.1; # 使用 HTTP/1.1 协议
        proxy_set_header Upgrade $http_upgrade; # 设置 WebSocket 升级头
        proxy_set_header Connection "upgrade"; # 设置 Connection 头
        proxy_set_header Host $host; # 设置 Host 头
        proxy_set_header X-Real-IP $remote_addr; # 设置真实 IP 头
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 设置 X-Forwarded-For 头
    }

    # 配置 location /download 块，将请求代理到本地服务
    location /download {
        proxy_redirect off; # 禁用代理跳转
        proxy_pass http://127.0.0.1:444; # 代理到本地端口，路由会重定向到 xray
        proxy_http_version 1.1; # 使用 HTTP/1.1 协议
        proxy_set_header Upgrade $http_upgrade; # 设置 WebSocket 升级头
        proxy_set_header Connection "upgrade"; # 设置 Connection 头
        proxy_set_header Host $host; # 设置 Host 头
        proxy_set_header X-Real-IP $remote_addr; # 设置真实 IP 头
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 设置 X-Forwarded-For 头
    }


    location ~ \.php$ {
        include snippets/fastcgi-php.conf; # 包含 FastCGI 参数，注意这个块不是必须的，建议去除。
        # 与 PHP-FPM 通信的设置
        # 这里的路径和端口需要与您的 PHP-FPM 配置相匹配
        fastcgi_pass unix:/run/php/php7.4-fpm.sock; # 对于 Unix 套接字连接
        # fastcgi_pass 127.0.0.1:9000; # 对于 TCP 连接
        # 设置一些 FastCGI 参数（确保这些参数与您的系统路径一致）
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
    }

  
}
