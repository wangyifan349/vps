# HTTP 服务器配置
server {
    listen 81; # 监听端口 81 上的 HTTP 流量
    server_name www.aiary.xyz; # 服务器名称
    root /usr/share/nginx/html; # 网站根目录
    index index.html index.htm; # 默认首页文件

    # 访问日志和错误日志
    access_log /var/log/nginx/www.aiary.xyz.access.log;
    error_log /var/log/nginx/www.aiary.xyz.error.log;

    # 性能和缓存设置
    sendfile on; # 启用 sendfile 优化
    tcp_nopush on; # 启用 TCP nopush
    tcp_nodelay on; # 禁用 TCP Nagle 算法以改善延迟
    keepalive_timeout 65; # 保持连接的超时时间
    types_hash_max_size 2048; # 增加 MIME 类型的哈希表大小
    # Gzip 压缩以减少发送给客户端的文件大小
    gzip on;
    gzip_disable "msie6"; # 禁用针对非常老旧的浏览器的 gzip
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # 压缩级别（1-9）
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # 安全相关的响应头
    add_header X-Content-Type-Options nosniff; # 防止 MIME 类型嗅探
    add_header X-Frame-Options SAMEORIGIN; # 防止点击劫持
    add_header X-XSS-Protection "1; mode=block"; # 对旧版浏览器启用 XSS 保护
    # 静态文件缓存设置
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d; # 设置静态文件的缓存时间
        add_header Cache-Control "public, no-transform"; # 设置缓存控制头
        access_log off; # 关闭静态文件的访问日志记录
    }
    # 隐藏 Nginx 版本号
    server_tokens off;
    # 禁用不安全的 HTTP 方法
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 405;
    }
# 禁止访问隐藏文件（以点开头的文件）
    location ~ /\. {
        deny all;
        access_log off; # 关闭访问日志
        log_not_found off; # 关闭日志中的“未找到”错误
    }
    # 错误页面处理
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    # 出于安全原因，禁止访问特定文件类型
    location ~* \.(htaccess|htpasswd|ini|phps|fla|psd|log|sh)$ {
        deny all;
    }
    # 启用目录列表显示
    location / {
        autoindex on; # 开启目录索引
        autoindex_exact_size off; # 显示文件的确切大小
        autoindex_localtime on; # 显示本地时间而不是 GMT 时间
    }

    
}

# HTTPS 服务器配置
server {
    listen       443 ssl http2;
    listen       [::]:443 ssl http2;
    listen       2053 ssl http2;
    listen       [::]:2053 ssl http2;
    listen       2096 ssl http2;
    listen       [::]:2096 ssl http2;
    server_name www.aiary.xyz cdn.aiary.xyz; # 服务器名称
    charset utf-8; # 设置字符集

    # SSL 配置

    # SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3; # 仅允许使用 TLSv1.2 和 TLSv1.3
    #ssl_ciphers 'TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'; # 仅使用提供完全前向保密的强加密套件
   
     ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';


     ssl_prefer_server_ciphers on; # 服务器优先选择加密套件
      ssl_ecdh_curve X25519:secp384r1; # 使用更强的 ECDH 曲线，优先使用 X25519




    ssl_session_cache shared:SSL:10m; # SSL 会话缓存
    ssl_session_timeout 10m; # SSL 会话超时时间
    ssl_session_tickets off; # 禁用 SSL 会话票据
    ssl_certificate /usr/local/etc/xray/fullchain.pem; # SSL 证书文件路径
    ssl_certificate_key /usr/local/etc/xray/privkey.pem; # SSL 证书密钥文件路径
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; # 启用 HSTS


    # 性能和缓存设置
    sendfile on; # 启用 sendfile 优化
    tcp_nopush on; # 启用 TCP nopush
    tcp_nodelay on; # 禁用 TCP Nagle 算法以改善延迟
    keepalive_timeout 65; # 保持连接的超时时间
    types_hash_max_size 2048; # 增加 MIME 类型的哈希表大小
    # Gzip 压缩以减少发送给客户端的文件大小
    gzip on;
    gzip_disable "msie6"; # 禁用针对非常老旧的浏览器的 gzip
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # 压缩级别（1-9）
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # MIME类型嗅探保护
    add_header X-Content-Type-Options nosniff; # 防止浏览器MIME类型嗅探，减少安全风险

    # 防止页面被嵌入非同源iframe，防御点击劫持攻击
    add_header X-Frame-Options SAMEORIGIN; # 只允许同源域下的页面嵌入iframe

    # 启用XSS保护(对于现代浏览器可能不再必要，因为它们已经有内置的XSS保护机制)
    add_header X-XSS-Protection "1; mode=block"; # 启用XSS过滤，如果检测到跨站脚本攻击则不渲染页面

    # 设置Referrer策略，控制Referer头的发送
    add_header Referrer-Policy no-referrer-when-downgrade; # 当从HTTPS转向HTTP时不发送Referer头

    # 跨源资源共享（CORS）配置
    add_header 'Access-Control-Allow-Origin' 'https://www.aiary.xyz'; # 允许指定域进行跨域请求
    add_header 'Access-Control-Allow-Headers' 'X-Requested-With, Content-Type, Accept, Origin, Authorization'; # 指定浏览器允许访问的响应头列表
    # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE'; # 指出实际请求中允许携带的HTTP方法
    add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range'; # 表明哪些响应头可以被前端JavaScript代码访问
    add_header 'Access-Control-Allow-Credentials' 'true'; # 允许前端请求携带凭证信息（如Cookies）
    add_header 'Access-Control-Max-Age' '86400'; # 设置预检请求的缓存时间，减少预检请求的频率
    # 缓存控制
    add_header 'Cache-Control' 'no-cache, no-store, must-revalidate'; # 禁用缓存，确保每次请求都是直接发送给服务器并且每次都获取最新的响应


    

    # 静态文件缓存设置
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d; # 设置静态文件的缓存时间
        add_header Cache-Control "public, no-transform"; # 设置缓存控制头
        access_log off; # 关闭静态文件的访问日志记录
    }
    # 隐藏 Nginx 版本号
    server_tokens off;
    # 禁用不安全的 HTTP 方法
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 405;
    }

    
# 禁止访问隐藏文件（以点开头的文件）
    location ~ /\. {
        deny all;
        access_log off; # 关闭访问日志
        log_not_found off; # 关闭日志中的“未找到”错误
    }

    # 错误页面处理
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    # 出于安全原因，禁止访问特定文件类型
    location ~* \.(htaccess|htpasswd|ini|phps|fla|psd|log|sh)$ {
        deny all;
    }

    # 如果请求的 host 不是 aiary.xyz 的子域，则关闭连接
    if ($host !~* \.aiary\.xyz$) {
        return 444;
    }

    root /usr/share/nginx/html; # 网站根目录

    # 优化静态文件的处理，如图片和Flash
    location ~* \.(gif|jpg|jpeg|png|bmp|swf)$ {
        expires 30d; # 设置缓存过期时间为30天
        add_header Cache-Control "public, no-transform"; # 明确客户端和代理服务器可缓存
        access_log off; # 关闭访问日志
        error_log /dev/null; # 关闭错误日志
        #try_files $uri =404; # 如果文件不存在，直接返回404错误，不再向上级请求
    }

    # 优化JavaScript和CSS文件的处理
    location ~* \.(js|css)$ {
        expires 12h; # 设置缓存过期时间为12小时
        add_header Cache-Control "public, no-transform"; # 明确客户端和代理服务器可缓存
        access_log off; # 关闭访问日志
        error_log /dev/null; # 关闭错误日志
        #try_files $uri =404; # 如果文件不存在，直接返回404错误，不再向上级请求
    }






    
    # 配置根目录的 location 块，启用自动索引功能
    location / {
        autoindex on; # 开启自动索引功能
        autoindex_exact_size on; # 显示文件的确切大小
        proxy_set_header X-Real-IP $remote_addr; # 设置真实 IP 头
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 设置 X-Forwarded-For 头
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip; # 设置 Cloudflare 连接 IP 头
       # 隐藏Nginx版本
        server_tokens off;
        
    }

    # 配置 location /download2 块，将请求代理到本地服务
    location /download2 {
        proxy_redirect off; # 禁用代理跳转
        proxy_pass http://127.0.0.1:1234; # 代理到本地端口
        proxy_http_version 1.1; # 使用 HTTP/1.1 协议
        proxy_set_header Upgrade $http_upgrade; # 设置 WebSocket 升级头
        proxy_set_header Connection "upgrade"; # 设置 Connection 头
        proxy_set_header Host $host; # 设置 Host 头
        proxy_set_header X-Real-IP $remote_addr; # 设置真实 IP 头
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 设置 X-Forwarded-For 头
    }

    # 配置 location /download 块，将请求代理到本地服务
    location /download {
        proxy_redirect off; # 禁用代理跳转
        proxy_pass http://127.0.0.1:444; # 代理到本地端口，路由会重定向到 xray
        proxy_http_version 1.1; # 使用 HTTP/1.1 协议
        proxy_set_header Upgrade $http_upgrade; # 设置 WebSocket 升级头
        proxy_set_header Connection "upgrade"; # 设置 Connection 头
        proxy_set_header Host $host; # 设置 Host 头
        proxy_set_header X-Real-IP $remote_addr; # 设置真实 IP 头
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 设置 X-Forwarded-For 头
    }
}
