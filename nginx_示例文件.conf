server {
    # 监听80端口，并将所有HTTP请求重定向到HTTPS
    listen 80;
    server_name www.helloworld.com;
    return 301 https://$server_name$request_uri;
}

server {
    # 监听443端口，启用SSL
    listen 443 ssl http2;
    server_name www.helloworld.com;

    # SSL证书和私钥的路径
    ssl_certificate /path/to/ssl/www.helloworld.com.crt;
    ssl_certificate_key /path/to/ssl/www.helloworld.com.key;

    # SSL会话缓存和超时设置
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 启用TLSv1.2和TLSv1.3，禁用较旧的协议以提高安全性
    ssl_protocols TLSv1.2 TLSv1.3;

    # 设置密码套件，优先使用高安全性的密码套件
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # 启用OCSP Stapling提高SSL/TLS的性能和可靠性
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # HSTS (HTTP Strict Transport Security) 配置
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # 隐藏Nginx版本号
    server_tokens off;

    # 网站根目录
    root /var/www/helloworld;
    index index.html index.htm;

    # 启用gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 静态文件缓存设置
    location ~* \.(css|js|jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|eot)$ {
        expires 30d;
        access_log off;
        add_header Cache-Control "public";
    }

    # 防止目录列表
    location / {
        autoindex off;
    }

    # 防止Nginx版本号泄露
    server_tokens off;

    # 其他安全相关的头部设置
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";

    # 404页面
    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }

    # 反向代理配置
    location /api {
        proxy_pass http://backend_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 额外的安全性和稳定性增强选项

    # HTTP/2 Server Push
    http2_push_preload on;

    # SSL会话票据随机化
    ssl_session_tickets on;
    ssl_session_ticket_key /path/to/ssl/session_ticket.key;

    # 内容安全策略
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.example.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https://example.com; font-src 'self' https://fonts.gstatic.com; frame-src 'self' https://www.youtube.com; object-src 'none'";

    # 限制Nginx进程使用的资源
    worker_rlimit_nofile 1024;

    # 限制请求体大小
    client_max_body_size 10M;

    # 设置HTTP Referrer Policy
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # 保护敏感文件
    location ~ /\.(ht|git) {
        deny all;
    }
}
