server {
    listen 80;
    server_name www.mydomain.com; 
    # 替换为你的域名
    # 设置网站根目录
    root /var/www/html;

    # 默认文件
    index index.html index.htm;

    # 日志文件
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # 限制访问   首先允许本地IP访问
    allow 127.0.0.1;
    # 然后拒绝所有其他IP访问
    deny all;
    # 限制请求体大小
    client_max_body_size 10M;
    # 文件上传大小限制
    client_body_buffer_size 128k;

    # 保护系统文件不被访问
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 静态文件缓存设置
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 启用 Gzip 压缩
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 防止点击劫持
    add_header X-Frame-Options "SAMEORIGIN";

    # 防止 XSS 攻击
    add_header X-XSS-Protection "1; mode=block";

    # 防止 MIME 类型混淆攻击
    add_header X-Content-Type-Options "nosniff";

    # 为了安全，隐藏 Nginx 版本号
    server_tokens off;

    # 限制请求方法
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 405;
    }

    # 配置默认处理程序
    location / {
        try_files $uri $uri/ =404;
    }

    # 自定义错误页面
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

# 限制并发连接数

# 创建一个名为addr的内存区域，用于存储客户端IP地址的并发连接数。
# $binary_remote_addr是一个内置变量，表示客户端的IP地址。
# zone=addr:10m指定了名为addr的区域和它的大小（10MB），足以存储大约160万个IP地址的状态。
limit_conn_zone $binary_remote_addr zone=addr:10m;

# 应用并发连接数限制。
# addr是之前定义的内存区域的名称，用于跟踪并发连接数。
# 100是每个IP地址允许的最大并发连接数。
# 当一个IP地址的并发连接数超过100时，Nginx将返回503错误（服务不可用）。
limit_conn addr 100;

# 限制请求频率

# 创建一个名为one的内存区域，用于跟踪客户端IP地址的请求频率。
# $binary_remote_addr是客户端IP地址。
# zone=one:10m指定了名为one的区域和它的大小（10MB）。
# rate=1r/s设置了允许的最大请求频率为每秒1个请求。
limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

# 应用请求频率限制。
# zone=one引用之前定义的内存区域。
# burst=5允许在超过设定的频率时额外累积最多5个请求，这些请求可以被延迟处理，而不是立即拒绝。
# nodelay是一个可选参数，它允许请求立即被处理，直到达到burst设置的限制，超过限制的请求将被延迟处理或拒绝。
# 如果不使用nodelay，那么即使在burst范围内，请求也会被均匀地延迟处理，以保持平均请求率不超过1r/s。
limit_req zone=one burst=5 nodelay;

}
