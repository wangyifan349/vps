server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    # 强制重定向到 HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name yourdomain.com www.yourdomain.com;

    # SSL 证书和私钥路径
    ssl_certificate /etc/ssl/certs/your_certificate.crt;  # 替换为你的证书路径
    ssl_certificate_key /etc/ssl/private/your_private.key;  # 替换为你的私钥路径

    # SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3;  # 仅启用 TLS 1.2 和 1.3
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20:ECDHE-RSA-CHACHA20';  # 安全的密码套件
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;  # SSL 会话缓存
    ssl_session_timeout 1h;  # SSL 会话超时
    ssl_dhparam /etc/ssl/certs/dhparam.pem;  # 使用强大的 DH 参数

    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # 启用 OCSP stapling
    ssl_stapling on;          # 启用 OCSP stapling
    ssl_stapling_verify on;   # 启用 OCSP stapling 验证
    resolver 8.8.8.8 8.8.4.4 valid=300s;  # DNS 解析器
    resolver_timeout 5s;  # DNS 解析超时

    # 安全头部设置
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://trustedscripts.example.com; object-src 'none';";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    add_header Expect-CT "max-age=86400, enforce";
    add_header Feature-Policy "geolocation 'self'; vibrate 'none'";

    # Gzip 压缩
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    # Brotli 压缩
    brotli on;
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 网站根目录
    root /var/www/yourdomain;
    index index.html index.htm index.php;

    # 登录页面配置
    location /login {
        try_files $uri $uri/ =404;
    }

    # 处理 PHP 文件
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # 根据你的 PHP 版本调整
    }

    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg)$ {
        expires 30d;  # 设置过期时间为 30 天
        add_header Cache-Control "public, max-age=2592000";  # 设置缓存控制头
    }

    # 防止热链接
    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        valid_referers none blocked yourdomain.com *.yourdomain.com;
        if ($invalid_referer) {
            return 403;  # 拒绝访问
        }
    }

    # 反向代理配置
    location /api {
        proxy_pass http://localhost:3000;  # 代理到后端服务
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;  # WebSocket 支持
        proxy_set_header Connection 'upgrade';    # WebSocket 支持
        proxy_set_header Host $host;              # 保留原始主机头
        proxy_set_header X-Real-IP $remote_addr; # 客户端真实 IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 转发的 IP
        proxy_set_header X-Forwarded-Proto $scheme; # 转发的协议
        add_header 'Access-Control-Allow-Origin' '*';  # 允许所有域名
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';  # 允许的请求方法
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';  # 允许的请求头
    }

    # 自定义错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /var/www/yourdomain;  # 自定义错误页面的路径
    }

    # 访问日志和错误日志
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 其他配置
    location / {
        try_files $uri $uri/ =404;
    }
}
