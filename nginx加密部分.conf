server {
    listen 443 ssl http2;
    server_name _; # 通配符，匹配所有域名

    if ($host != 'www.allowed-domain.com') {
        return 444; # 关闭连接
    }
    # SSL配置
    ssl_certificate /path/to/your/fullchain.pem; # 您的证书全链路径
    ssl_certificate_key /path/to/your/privkey.pem; # 您的私钥路径

    # 强化SSL设置
    ssl_protocols TLSv1.2 TLSv1.3; # 仅允许使用TLSv1.2和TLSv1.3
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'; # 限制使用的加密算法
    #ECDHE-ECDSA-AES256-GCM-SHA384 和 ECDHE-RSA-AES256-GCM-SHA384: 这些套件使用AES 256位密钥和Galois/Counter Mode（GCM）进行加密，提供了非常强的安全性。SHA-384用于消息认证。ECDHE用于密钥交换，ECDSA和RSA分别用于证书的签名验证。
    #ECDHE-ECDSA-CHACHA20-POLY1305 和 ECDHE-RSA-CHACHA20-POLY1305: 这些套件使用ChaCha20加密算法和Poly1305消息认证码，它们在某些环境下（尤其是移动设备）比AES更高效。同样，ECDHE用于密钥交换，而ECDSA和RSA用于签名验证。
    #ECDHE-ECDSA-AES128-GCM-SHA256 和 ECDHE-RSA-AES128-GCM-SHA256: 这些套件使用AES 128位密钥和GCM模式进行加密，提供了很强的安全性，但相对于256位版本，它们使用较短的密钥长度。SHA-256用于消息认证。同样，ECDHE用于密钥交换，而ECDSA和RSA用于签名验证。
    ssl_prefer_server_ciphers on; # 优先使用服务器指定的加密算法
    ssl_session_cache shared:SSL:10m; # 启用SSL会话缓存，提高性能
    ssl_session_timeout 10m; # 设置SSL会话的超时时间

    # 其他之前的配置...
    # 设置网站根目录
    root /var/www/html;
    # 默认文件
    index index.html index.htm;
    # 日志文件
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    # 限制访问
    allow 127.0.0.1;
    deny all;
    # 限制请求体大小
    client_max_body_size 10M;
    # 文件上传大小限制
    client_body_buffer_size 128k;
    # 保护系统文件不被访问
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    # 静态文件缓存设置
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
    # 启用 Gzip 压缩
    gzip on;
    # 防止点击劫持
    add_header X-Frame-Options "SAMEORIGIN";
    # 防止 XSS 攻击
    add_header X-XSS-Protection "1; mode=block";
    # 防止 MIME 类型混淆攻击
    add_header X-Content-Type-Options "nosniff";
    # 为了安全，隐藏 Nginx 版本号
    server_tokens off;
    # 限制请求方法
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 405;
    }
    # 配置默认处理程序
    location / {
        try_files $uri $uri/ =404;
    }
    # 自定义错误页面
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }
 # 限制并发连接数
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn addr 100;

    # 限制请求频率
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
    limit_req zone=one burst=5 nodelay;
}
